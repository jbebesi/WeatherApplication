<InputText ValueChanged="FilterFunction" ValueExpression="() => filter" Value=@filter/>
<InputSelect ValueChanged="ValueSelected" ValueExpression="() => filter">
        @if (filtered != null)
    {
        @for (int i = 0; i < filtered.Length && i < MaxShown; i++)
        {
            <option value="@filtered[i]">@filtered[i]</option>
        }
    }
    </InputSelect>




@code {
    [Parameter]
    public IEnumerable<string> OptionsList { get; set; }
    private string[] filtered;
    [Parameter]
    public int MaxShown { get; set; } = 30;
    [Parameter]
    public int MinShown { get; set; } = 5;
    [Parameter]
    public Action<string>? UpdateOptionsList { get; set; }
    [Parameter]
    public Action<string>? ValueSelected{ get; set; }

    private string filter = "";
    private void FilterFunction(string val)
    {
        Console.WriteLine("Filtered");
        filter = val;
        if (OptionsList == null)
            return;
        var temp = OptionsList.Where(t => t.Contains(val)).ToArray();
        if (temp == filtered)
            return;
        filtered=temp;
        if(filtered.Length < MinShown && UpdateOptionsList != null)
        {
            UpdateOptionsList?.Invoke(filter);
        }
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        FilterFunction("");
        base.OnParametersSet();
    }
}
