@page "/showweatherdata"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Logging

@inject IShowWeatherDataViewModel viewModel
@inject IndexViewModel location
@inject ILogger<ShowWeatherData> logger
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (IsAuthenticated)
{
    <EditForm Model="@viewModel">
        <WeatherApplication.Client.Components.Combobox OptionsList=CityList ValueSelected="LoadForecast" UpdateOptionsList="UpdateCityList" />
        @if (viewModel.Forecasts != null)
        {
            <h1 class="center">@viewModel.Forecasts.CityName ,@viewModel.Forecasts.CountryName</h1>

            <MainWeatherData ForecastData="@viewModel.Forecasts" />
            <ForecastGrid Data="@viewModel.Forecasts.Weather" />
        }
    </EditForm>
}
else
{
    <div>Not authenticated</div>
}

@code {
    AuthenticationState AuthenticationState;
    bool IsAuthenticated = false;
    IEnumerable<string>? CityList;
    static Action<string>? LoadForecast;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if(AuthenticationState != null)
            IsAuthenticated = AuthenticationState.User.Identity.IsAuthenticated;
        CityList = await viewModel.GetCityList();
        if(location.Location != null)
        {

            await viewModel.GetForecast(location.Location);
        }
        LoadForecast = async t => { await viewModel.GetForecast(t); StateHasChanged(); };
        UpdateCityList = filter => { CityList = viewModel.UpdateCityList(filter).Result; StateHasChanged(); };
        await base.OnInitializedAsync();
    }

    [JSInvokable]
    public static void SetCity(string city)
    {
        LoadForecast?.Invoke(city);
    }

    Func<Task<string[]>> LoadMoreOptions(string filter)
    {
        return async () => (await viewModel.UpdateCityList(filter)).ToArray();
    }

    Action<string> UpdateCityList;

    async Task OnValueChanged(string val)
    {
        Console.WriteLine($"{val} - hit");
        await viewModel.GetForecast(val);
    }
}
